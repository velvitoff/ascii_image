use image::io::Reader as ImageReader;
use image_ascii::AsciiImage;

#[test]
fn ascii_image_density_chars_len0() {
    let image = ImageReader::open("tests/data/images/rust_icon.png")
        .unwrap()
        .decode()
        .unwrap();

    let asc = AsciiImage::builder(&image)
        .build();

    let asc_chars = AsciiImage::builder(&image)
        .density_chars(vec![])
        .build();

    let res = asc.generate_text().unwrap();
    let res2 = asc_chars.generate_text().unwrap();
    assert_eq!(res, res2);
}

#[test]
fn ascii_image_density_chars_len_too_large() {
    let image = ImageReader::open("tests/data/images/every_blackwhite.png")
        .unwrap()
        .decode()
        .unwrap();

    let chars_256: Vec<char> = vec![
    '.',',',':','+','*','?','%','#','@','.',',',':','+','*','?','%','#','@',
    '.',',',':','+','*','?','%','#','@','.',',',':','+','*','?','%','#','@',
    '.',',',':','+','*','?','%','#','@','.',',',':','+','*','?','%','#','@',
    '.',',',':','+','*','?','%','#','@','.',',',':','+','*','?','%','#','@',
    '.',',',':','+','*','?','%','#','@','.',',',':','+','*','?','%','#','@',
    '.',',',':','+','*','?','%','#','@','.',',',':','+','*','?','%','#','@',
    '.',',',':','+','*','?','%','#','@','.',',',':','+','*','?','%','#','@',
    '.',',',':','+','*','?','%','#','@','.',',',':','+','*','?','%','#','@',
    '.',',',':','+','*','?','%','#','@','.',',',':','+','*','?','%','#','@',
    '.',',',':','+','*','?','%','#','@','.',',',':','+','*','?','%','#','@',
    '.',',',':','+','*','?','%','#','@','.',',',':','+','*','?','%','#','@',
    '.',',',':','+','*','?','%','#','@','.',',',':','+','*','?','%','#','@',
    '.',',',':','+','*','?','%','#','@','.',',',':','+','*','?','%','#','@',
    '.',',',':','+','*','?','%','#','@','.',',',':','+','*','?','%','#','@',
    '.',',',':','+'
    ];

    let chars_270: Vec<char> = vec![
    '.',',',':','+','*','?','%','#','@','.',',',':','+','*','?','%','#','@',
    '.',',',':','+','*','?','%','#','@','.',',',':','+','*','?','%','#','@',
    '.',',',':','+','*','?','%','#','@','.',',',':','+','*','?','%','#','@',
    '.',',',':','+','*','?','%','#','@','.',',',':','+','*','?','%','#','@',
    '.',',',':','+','*','?','%','#','@','.',',',':','+','*','?','%','#','@',
    '.',',',':','+','*','?','%','#','@','.',',',':','+','*','?','%','#','@',
    '.',',',':','+','*','?','%','#','@','.',',',':','+','*','?','%','#','@',
    '.',',',':','+','*','?','%','#','@','.',',',':','+','*','?','%','#','@',
    '.',',',':','+','*','?','%','#','@','.',',',':','+','*','?','%','#','@',
    '.',',',':','+','*','?','%','#','@','.',',',':','+','*','?','%','#','@',
    '.',',',':','+','*','?','%','#','@','.',',',':','+','*','?','%','#','@',
    '.',',',':','+','*','?','%','#','@','.',',',':','+','*','?','%','#','@',
    '.',',',':','+','*','?','%','#','@','.',',',':','+','*','?','%','#','@',
    '.',',',':','+','*','?','%','#','@','.',',',':','+','*','?','%','#','@',
    '.',',',':','+','*','?','%','#','@','.',',',':','+','*','?','%','#','@'];

    assert_eq!(chars_256.len(), 256);
    assert_eq!(chars_270.len(), 270);

    let asc_256 = AsciiImage::builder(&image)
        .density_chars(chars_256)
        .build();

    let asc_270 = AsciiImage::builder(&image)
        .density_chars(chars_270)
        .build();

    let res = asc_256.generate_text().unwrap();
    let res2 = asc_270.generate_text().unwrap();
    assert_eq!(res, res2);

}